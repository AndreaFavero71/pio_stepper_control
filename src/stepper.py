"""
Andrea Favero 09/02/2025

Micropython code for Raspberry Pi Pico (RP2040 and RP2350)
It demonstrates how to use PIO functions to control a stepper motor:
  - implementation for steppers running with steps frequency between 50Hz and 5KHz.
  - min and max stepper frequency can be defined upfront: Suitable PIO frequency is calculated
    according to the min and max stepper frequency.
  - the 'speed' for the stepper is passed to the PIO, that generates the pulses at GPIO Pin.
  - the 'steps' for the stepper is passed to the PIO, and meant to be the predefined steps
    after that the stepper stops.
  - a PIO based counter counts the steps at the GPIO Pin.
  - once the steps are made, a PIO interrupt stops the step generator (therefore the stepper motor).
  - counted steps (effectively made) are retrieved by the main program from the PIO ISR register.
  - stepper rotation time is (precisely) calculated in the main loop, upfront the stepper activation.
  - pre-encoded istructions to the PIO (>100 times faster)

Notes:
  - 5KHz determines >3 revs/s for a stepper set at 1600 steps/rev.
  - 1600 steps/rev is a common Nema 17 stepper (200 steps/rev) with 1/8 microstepping.

PIO counter accuracy (as implemented):
  - RP2350: does not miss any step for stepper frequency between 10Hz and 15KHz.
  - RP2040: does not miss any step for stepper frequency between 50Hz and 5KHz.
  - RP2040: up to 1% missed steps for frequency between 5KHz and 10KHz.
  RP2350 is clearly more accurate than RP2040.



MIT License

Copyright (c) 2025 Andrea Favero

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""


from machine import Pin
from rp2 import PIO, StateMachine, asm_pio, asm_pio_encode
import time, random


class Stepper:
    
    def __init__(self, pio_pin = 25, max_freq=125000000, freq=5000000, slow_init=True):
        """
        Initialize the Stepper class.
        
        Note about the led:
        Only on the Raspberry Pi Pico the onboard led will blink as per steps frequency generated by the PIO.
        This is not the case on the Pico W, Pico2 and Pico2 W s the led is not driven by a normal GPIO.
        This is also not the case or RP2030-Zeor and RP2350-Zero boards, as a WS2812 RGB led is used.
        """

        self.PIO_pin = pio_pin           # GPIO pin for steps generation and steps count
        self.MAX_FREQUENCY = max_freq    # frequency for the sm1 and sm2 PIO function (150_000_000 on RP2350, 125_000_000 on RP2040 and unrecognized boards)
        self.FREQUENCY = freq            # frequency for the sm0 PIO function
        self.SLOW_INIT = slow_init       # change the visual feedback from the board (led blinking)
#         self.PICO_LED_ONBOARD = 25       # GPIO pin for onboard led in Pico (it doesn't work but it doesn't harm either on other boards...)
#         self.PIO_pin = self.PICO_LED_ONBOARD    # Pico onboard led GPIO pin is assigned to the pin used by PIO to generate the steps
        self.led_onboard = Pin("LED", Pin.OUT)  # "LED" label is used instead of the GPIO pin, for the visual feedback on Pico W and Pico2 W boards
        
        # pre-encode some of the PIO instructions
        self.PULL_ENCODED = asm_pio_encode("pull()", 0)
        self.MOV_X_OSR_ENCODED = asm_pio_encode("mov(x, osr)", 0)
        self.PUSH_ENCODED = asm_pio_encode("push()", 0)
        self.MOV_ISR_X_ENCODED = asm_pio_encode("mov(isr, x)", 0)
        
        if slow_init:
            # blink the onboard LED to indicate initialization
            for i in range(5):
                self.led_onboard.value(1)
                time.sleep(0.2)
                self.led_onboard.value(0)
                time.sleep(0.2)
        
        
        # state machine for motor steps generation
        self.sm0 = StateMachine(0, self.steps_mot_pio, freq=self.FREQUENCY, set_base=self.PIO_pin)
        self.sm0.active(0)                 # state machine not started yet

        # state machine for stopping the motor
        self.sm1 = StateMachine(1, self.stop_motor_pio, freq=self.MAX_FREQUENCY, in_base=self.PIO_pin)
        self.sm1.irq(self.stop_motor_handler)
        self.sm1.active(0)                 # state machine not started yet

        # state machine for motor steps tracking
        self.sm2 = StateMachine(2, self.steps_counter_pio, freq=self.MAX_FREQUENCY, in_base=self.PIO_pin)
        self.reset_pulses_counter()        # reset the steps counter
        self.sm2.active(0)                 # state machine not started yet
        
        time.sleep(0.1)
        


        
        
            
            
    #sm0
    @asm_pio(set_init=PIO.OUT_LOW)
    def steps_mot_pio():       # no 'self' in PIO callback function !
        """
        A frequency is generated at PIO: The frequency remains fix (it can activated and stopped).
        A Pin is associated to the Pin
        The speed can be varied by changing the off time (delay) between ON pulses
        This method allows for stepper speed variation.
        """
        label("main")         # entry point from jmp
        pull(noblock)         # get delay data from osr, and maintain it in memory
        mov(x,osr)            # OSR (Output Shift Register) content is moved to x, to prepare for future noblock pulls
        mov(y, x)             # delay assigned to y scretch register
        set(pins, 1)  [15]    # set the pin high 16 times
        set(pins, 1)  [15]    # set the pin high 16 times
        label("delay")        # entry point when y_dec>0
        set(pins, 0)          # set the pin low 1 time
        jmp(y_dec, "delay")   # y_dec-=1 if y_dec>0 else jump to "delay" 
        jmp("main")           # jump to "main"


    #sm1
    # Define the PIO program for stopping the motor
    @asm_pio()
    def stop_motor_pio():
        """
        This PIO fiunction:
            -Reads the rising edges from the output GPIO that generates the steps.
            -De-counts the 32bit OSR.
            -Once the decount is zero it stops the steps generation (sm0).
        """
        label("wait_for_step")
        wait(1, pin, 0)             # wait for a rising edge
        nop() [5]                   # no operation gives time for the signal to set above V-high threshold
        wait(0, pin, 0)             # wait for a lowering edge
        nop() [5]                   # no operation gives time for the signal to set above V-low threshold
        jmp(x_dec, "wait_for_step") # when x is zero it moves to next row (irq)
        irq(block, rel(0))          # trigger an IRQ
    
    
    #sm2
    # Define the PIO program for steps counting
    @asm_pio()
    def steps_counter_pio():
        """
        This PIO fiunction:
            -Reads the rising edges from the output GPIO that generates the steps.
            -De-counts the 32bit OSR.
            -The starting value, to decount from, is sent by inline commands.
            -The reading is pushed to the rx_fifo on request, via an inline command.
        """
        label("loop")
        wait(1, pin, 0)      # wait for a rising edge
        nop() [5]            # no operation gives time for the signal to properly set above the V-high threshold
        wait(0, pin, 0)      # wait for a lowering edge
        nop() [5]            # no operation gives time for the signal to properly set below the V-low threshold
        jmp(x_dec, "loop")   # when x is zero (after 32bits negative) it wraps back to beginning



    def set_pulses_to_do(self, val):
        """Sets  the initial value for the stpes to do, from which to decount from.
           Pre-encoded instructions are >140 times faster."""
        self.sm1.put(val)
        self.sm1.exec(self.PULL_ENCODED)       # execute pre-encoded 'pull()' instruction
        self.sm1.exec(self.MOV_X_OSR_ENCODED)  # execute pre-encoded 'mov(x, osr)' instruction
        self.sm1.active(1)
        

    def reset_pulses_counter(self):
        """Reset the stpes counter.
           Pre-encoded instructions are >140 times faster."""
        self.sm2.put(0)                        # decount starts from zero
        self.sm2.exec(self.PULL_ENCODED)       # execute pre-encoded 'pull()' instruction
        self.sm2.exec(self.MOV_X_OSR_ENCODED)  # execute pre-encoded 'mov(x, osr)' instruction
        self.sm2.active(1)



    def get_pulses_count(self):
        """Gets the steps counter value.
           The 32bits counter is decounted from 0.
           Pre-encoded instructions are >140 times faster."""
        self.sm2.exec(self.MOV_ISR_X_ENCODED)  # execute pre-encoded 'mov(isr, x)' instruction
        self.sm2.exec(self.PUSH_ENCODED)       # execute pre-encoded 'push()' instruction
        
        if self.sm2.rx_fifo:
            return -self.sm2.get() & 0xffffffff
        else:
            return -1



    def stop_motor_handler(self, sm0):
        """Function called by the PIO interrupt handler.
           This function de-activate the sm0, responsable for the steps generation."""
        self.sm0.active(0)                    # Stop the step generation
        
        
    def deactivate_pio(self):
        """Function to deactivate PIO."""
        self.sm0.active(0)                    # sm0 is deactivated
        self.sm1.active(0)                    # sm1 is deactivated
        self.sm2.active(0)                    # sm2 is deactivated
        PIO(0).remove_program()               # reset SM0 block
        PIO(1).remove_program()               # reset SM1 block
        print("State Machines deactivated")

